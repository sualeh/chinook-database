name: Create Release

on:
  workflow_dispatch:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+.[0-9]+-[A-Z]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

# SETUP BUILD ENVIRONMENT
    - id: prepare-maven-build
      name: Prepare Maven build
      uses: sualeh/prepare-maven-build@v1.4.0
      with:
        java-version: 17

# BUILD FOR DISTRIBUTION
    - id: build
      name: Build and test for distribution
      shell: bash
      run: |
        # Build
        mvn \
          --no-transfer-progress \
          --batch-mode \
          clean install

# CREATE GITHUB RELEASE AND ADD ASSETS
    - id: create-release
      name: Create GitHub release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: |
          Chinook Database Release ${{ github.sha }}
        draft: false
        prerelease: false
    - id: upload-release-zip
      name: Upload Chinook Database for SQLite
      uses: actions/upload-release-asset@latest
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./target/chinook-database-2.2.1.sqlite
        asset_name: chinook-database-2.2.1.sqlite
        asset_content_type: application/octet-stream

# CREATE AND PUBLISH DOCKER IMAGE
    - id: create-docker-image
      name: Create and publish Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      working-directory: .
      run: |
        ./docker-build.sh

# PUBLISH TO CENTRAL REPOSITORY
    - id: install-secret-key
      name: Install secret key
      # Note: OSSRH_GPG_SECRET_KEY is exported using gpg --export-secret-keys -a <keyid>
      # and has newlines substituted with a literal \n
      run: |
        cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
    - id: publish-to-central
      name: Publish to Central Repository
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      run: |
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Dmaven.javadoc.skip=false \
          -Dskip.signing.artifacts=false \
          -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
          clean deploy
